<!-- <% layout('layout/boilerplate') %>
<link rel="stylesheet" href="/stylesheets/login/css/style.css" />
          <div class="card-body" >
             <form action="/entercode/<%= username %>" method="POST" class="mt-0">
                    <h5 class="text-center mb-4" style="font-size:xxx-large;text-shadow: 2px 2px black;">Forgot your Password?</h5>
                    <div class="mb-0">
                      <label class="form-label" for="rcode">If you are an Admin or Reviewer, type your Email here</label> 
                      <input
                        class="form-ctl"
                        type="number"
                        id="rcode"
                        name="rcode"
                        placeholder="xxxxxx"
                        autocomplete="off"
                        pattern="[0-9]{6}"
                        title="There must be six digits!"
                        required
                      />
                      </div>
                      <div class="mb-4 mt-2">
                        <p class="mb-2"></p>
                      </div>
                      <div >
                        <button type="submit" class="loginbtn" ><span>Verify</span></button>
                        </div>
                     
                    </div> 
                  </form>
            </div> -->

<link rel="stylesheet" href="/stylesheets/login/css/verificationstyle.css" />
<div class="mx-auto my-auto vh-100">
	<div class="d-flex justify-content-center">
    <form action="/entercode/<%= username %>" method="POST" class="vh-100 mt-5" style="color:black;">
        <!-- <h5 class="text-center mb-4" style="font-size:xxx-large;text-shadow: 2px 2px black;">Forgot your Password?</h5> -->
        <fieldset>
            <legend>Validation Code</legend>
            <!-- <label for="otc-1">Number 1</label>
            <label for="otc-2">Number 2</label>
            <label for="otc-3">Number 3</label>
            <label for="otc-4">Number 4</label>
            <label for="otc-5">Number 5</label>
            <label for="otc-6">Number 6</label> -->
    
            <!-- https://developer.apple.com/documentation/security/password_autofill/enabling_password_autofill_on_an_html_input_element -->
            <div>
            <input type="number" pattern="[0-9]*"  value="" inputtype="numeric" autocomplete="one-time-code" id="otc-1" name="rcode1" required>
    
            <!-- Autocomplete not to put on other input -->
            <input type="number" pattern="[0-9]*" min="0" max="9" maxlength="1"  value="" inputtype="numeric" id="otc-2" name="rcode2" required>
            <input type="number" pattern="[0-9]*" min="0" max="9" maxlength="1"  value="" inputtype="numeric" id="otc-3" name="rcode3" required>
            <input type="number" pattern="[0-9]*" min="0" max="9" maxlength="1"  value="" inputtype="numeric" id="otc-4" name="rcode4" required>
            <input type="number" pattern="[0-9]*" min="0" max="9" maxlength="1"  value="" inputtype="numeric" id="otc-5" name="rcode5" required>
            <input type="number" pattern="[0-9]*" min="0" max="9" maxlength="1"  value="" inputtype="numeric" id="otc-6" name="rcode6" required>
            </div>
        </fieldset>
        <div >
            <button type="submit" class="loginbtn" ><span>Verify</span></button>
            </div>
    </form>
	</div>
</div>           
<script>
    let in1 = document.getElementById('otc-1'),
    ins = document.querySelectorAll('input[type="number"]'),
	 splitNumber = function(e) {
		let data = e.data || e.target.value; // Chrome doesn't get the e.data, it's always empty, fallback to value then.
		if ( ! data ) return; // Shouldn't happen, just in case.
		if ( data.length === 1 ) return; // Here is a normal behavior, not a paste action.
		
		popuNext(e.target, data);
		//for (i = 0; i < data.length; i++ ) { ins[i].value = data[i]; }
	},
	popuNext = function(el, data) {
		el.value = data[0]; // Apply first item to first input
		data = data.substring(1); // remove the first char.
		if ( el.nextElementSibling && data.length ) {
			// Do the same with the next element and next data
			popuNext(el.nextElementSibling, data);
		}
	};

ins.forEach(function(input) {
	/**
	 * Control on keyup to catch what the user intent to do.
	 * I could have check for numeric key only here, but I didn't.
	 */
	input.addEventListener('keyup', function(e){
		// Break if Shift, Tab, CMD, Option, Control.
		if (e.keyCode === 16 || e.keyCode == 9 || e.keyCode == 224 || e.keyCode == 18 || e.keyCode == 17) {
			 return;
		}
		
		// On Backspace or left arrow, go to the previous field.
		if ( (e.keyCode === 8 || e.keyCode === 37) && this.previousElementSibling && this.previousElementSibling.tagName === "INPUT" ) {
			this.previousElementSibling.select();
		} else if (e.keyCode !== 8 && this.nextElementSibling) {
			this.nextElementSibling.select();
		}
		
		// If the target is populated to quickly, value length can be > 1
		if ( e.target.value.length > 1 ) {
			splitNumber(e);
		}
	});
	
	/**
	 * Better control on Focus
	 * - don't allow focus on other field if the first one is empty
	 * - don't allow focus on field if the previous one if empty (debatable)
	 * - get the focus on the first empty field
	 */
	input.addEventListener('focus', function(e) {
		// If the focus element is the first one, do nothing
		if ( this === in1 ) return;
		
		// If value of input 1 is empty, focus it.
		if ( in1.value == '' ) {
			in1.focus();
		}
		
		// If value of a previous input is empty, focus it.
		// To remove if you don't wanna force user respecting the fields order.
		if ( this.previousElementSibling.value == '' ) {
			this.previousElementSibling.focus();
		}
	});
});

/**
 * Handle copy/paste of a big number.
 * It catches the value pasted on the first field and spread it into the inputs.
 */
in1.addEventListener('input', splitNumber);
</script>
            